import { Container } from "@mui/system";
import React, { useMemo, useRef, useState } from "react";
import styled from "styled-components";
import axios from "axios";
import DatePicker from "../../components/DatePick/DatePicker";
import { addDays } from "date-fns";
import "react-quill/dist/quill.snow.css";
import { API_BASE_URL, imgurl, joinmeurl, pickurl } from "../../config";
import {
  Button,
  FormControl,
  InputLabel,
  MenuItem,
  Select,
} from "@mui/material";
import { Navigate, useNavigate } from "react-router";
import { quill } from "quill";
import "./pickupmeform.css";
import QuillEditor from "../../components/QuillEditor/QuillEditor";

// style
const JoinTitle = styled.div`
  max-height: 3rem;
  height: 3rem;
  margin-top: 4px;
  justify-content: center;
`;

function PickUpMeForm() {
  const navigate = useNavigate();

  const [htmlContent, setHtmlContent] = useState("");
  const quillRef = useRef();

  // image url
  const [reqImageUrl, setReqImageUrl] = useState();

  // date
  const [selectDate, setSelectDate] = useState([
    {
      startDate: new Date(),
      endDate: addDays(new Date(), 1),
      key: "selection",
    },
  ]);
  const dateOnChange = (item) => setSelectDate([item.selection]);
  //////////////////////////// timestampÎ°ú Î≥ÄÌôò
  let start_Date = Date.parse(selectDate[0].startDate);
  let end_Date = Date.parse(selectDate[0].endDate);

  // ÏßÄÏó≠ ÏÑ§Ï†ï
  const [selectRegion, setSelectRegion] = useState("");
  const regionKey = [
    "Í∞ïÏõê",
    "Í≤ΩÍ∏∞",
    "Ï†úÏ£º",
    "ÏÑúÏö∏",
    "Ïù∏Ï≤ú",
    "Ï∂©ÎÇ®",
    "Ï∂©Î∂Å",
    "Ï†ÑÎ∂Å",
    "Ï†ÑÎÇ®",
    "Í≤ΩÎ∂Å",
    "Í≤ΩÎÇ®",
  ];
  const regionOptions = regionKey.map((selectregion) => {
    return (
      <option value={selectregion} key={selectregion}>
        {selectregion}
      </option>
    );
  });
  const handleRegion = (event) => {
    setSelectRegion(event.target.value);
  };

  // Í≤åÏãúÍ∏Ä Ï∂îÍ∞ÄÌïòÍ∏∞
  const handleSubmit = (e) => {
    e.preventDefault();

    //ÌÉúÍ∑∏Î•º Ï†úÏô∏Ìïú ÏàúÏàò textÎßåÏùÑ Î∞õÏïÑÏò®Îã§. Í≤ÄÏÉâÍ∏∞Îä•ÏùÑ Íµ¨ÌòÑÌïòÏßÄ ÏïäÏùÑ Í±∞ÎùºÎ©¥ Íµ≥Ïù¥ textÎßå Îî∞Î°ú Ï†ÄÏû•Ìï† ÌïÑÏöîÎäî ÏóÜÎã§.
    const description = quillRef.current.getEditor().getText();
    const title = e.target.title.value;

    res({
      title: title,
      preferredRegion: selectRegion,
      dateInfo: { startDate: start_Date, endDate: end_Date },
      content: description,
      categoryId: 2,
    });
  };

  // joinme mapperÏóê start/end date Ï∂îÍ∞Ä
  // http 200 ÏÑ±Í≥µ -> DB ÏÉùÏÑ± X title null
  const res = async (pickmeDTO) => {
    console.log("Í∏Ä ÏûÖÎ†•ÌïòÍ∏∞ Ï†Ñ data : ", pickmeDTO);
    if (pickmeDTO.content.trim() === "") {
      alert("ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
      return;
    } else {
      //ÏÉàÎ°úÏö¥ Í≤åÏãúÍ∏Ä ÏÉùÏÑ±s
      axios.defaults.headers = {
        "Content-Type": "application/json",
        Authorization: "Bearer " + localStorage.getItem("ACCESS_TOKEN"),
      };
      axios
        .post(pickurl + "/write", pickmeDTO) //joinmeurl + "/insert", joinmeDTO
        .then((res) => {
          console.log("ÏûëÏÑ±ÏôÑÎ£å ÌõÑ Í≤∞Í≥º ", res);
          alert("Í∏Ä ÏûëÏÑ± ÏôÑÎ£å");
          navigate("/pickme/0");
        })
        .catch((error) => {
          if (error.res) {
            console.log(error.res);
            console.log("server responded");
            alert("server ÏóêÎü¨");
          } else if (error.request) {
            console.log("network error");
            alert("axios ÏóêÎü¨");
          } else {
            console.log(error);
          }
        });
    }
  };

  const backList = () => {
    navigate(-1);
  };

  return (
    <>
      <div className="containors">
        <form className="ccform" onSubmit={handleSubmit}>
          <header className="ccheader">
            <h1>Í∞ôÏù¥Í∞ÄÏöî Í∏ÄÏì∞Í∏∞ ÏàòÏ†ïÌï¥Î≥¥Ïûê</h1>
          </header>

          <div>
            <label>üî∏Í∏∞Í∞Ñ</label>
            <DatePicker
              selectDate={selectDate}
              setSelectDate={setSelectDate}
              dateOnChange={dateOnChange}
            />
          </div>

          <div>
            <div className="ccfield-prepend">
              <span className="ccform-addon">
                <i className="fa fa-info fa-2x"></i>
              </span>
              <input
                className="ccformfield"
                type="text"
                placeholder="Ï†úÎ™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî"
                required
                it="title"
                name="title"
              />
            </div>

            <div
              className="ccfield-prepend"
              style={{ display: "flex", textAlign: "center" }}
            >
              <span className="ccform-addon">
                <i className="fa-solid fa-people-line fa-2x"></i>
              </span>
            </div>

            <div className="ccfield-prepend" style={{ display: "flex" }}>
              <span className="ccform-addon">
                <i className="fa-solid fa-people-line fa-2x"></i>
              </span>
              <div className="select-charge">
                <h3>üî∏ÏßÄÏó≠ : {selectRegion} </h3>
                <select
                  className="selectbox"
                  id="region"
                  name="region"
                  onChange={handleRegion}
                >
                  {regionOptions}
                </select>
              </div>
            </div>

            <div
              className="ccfield-prepend"
              style={{ display: "block", position: "relative" }}
            >
              <span
                className="ccform-addon-img"
                style={{ transform: "translate(0px, -330px)" }}
              >
                <i className="fa-regular fa-image fa-2x"></i>
              </span>
            </div>

            <QuillEditor
              quillRef={quillRef}
              htmlContent={htmlContent}
              setHtmlContent={setHtmlContent}
              reqImageUrl={reqImageUrl}
              setReqImageUrl={setReqImageUrl}
            />

            <div className="ccfield-prependbtn">
              <input className="ccbtn1" onClick={backList} value="Î™©Î°ùÏúºÎ°ú" />
              <input className="ccbtn" type="submit" value="ÏûëÏÑ±ÏôÑÎ£å" />
            </div>
          </div>
        </form>
      </div>
    </>
  );
}

export default PickUpMeForm;
